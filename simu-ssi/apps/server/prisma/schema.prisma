generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SiteConfig {
  id                 Int      @id @default(1)
  evacOnDAI          Boolean  @default(false)
  evacOnDMDelayMs    Int      @default(300000)
  processAckRequired Boolean  @default(true)
  updatedAt          DateTime @updatedAt
}

model AccessCode {
  level     Int      @id
  code      String   @unique
  updatedAt DateTime @updatedAt
}

model TraineeLayout {
  id         Int      @id @default(1)
  configJson String
  updatedAt  DateTime @updatedAt
}

model ProcessAck {
  id        Int      @id @default(1)
  isAcked   Boolean  @default(false)
  ackedBy   String?
  ackedAt   DateTime?
  clearedAt DateTime?
}

model ManualCallPoint {
  id              Int      @id @default(autoincrement())
  zoneId          String
  isLatched       Boolean  @default(false)
  lastActivatedAt DateTime?
  lastResetAt     DateTime?

  @@index([zoneId])
}

model Zone {
  id    String @id
  label String
  kind  String
}

model Device {
  id        String @id
  kind      String
  zoneId    String?
  propsJson String?
}

model Scenario {
  id   String @id
  name String
  json String
}

model Session {
  id             String   @id @default(uuid())
  name           String
  mode           String   @default("libre")
  objective      String?
  notes          String?
  improvementJson String?
  trainerId      String?
  traineeId      String?
  startedAt      DateTime @default(now())
  endedAt        DateTime?
  trainer        User?    @relation("TrainerSessions", fields: [trainerId], references: [id])
  trainee        User?    @relation("TraineeSessions", fields: [traineeId], references: [id])
  scores         Score[]
  events         EventLog[]
}

model EventLog {
  id          Int      @id @default(autoincrement())
  ts          DateTime @default(now())
  sessionId   String?
  source      String
  zoneId      String?
  payloadJson String?
  session     Session? @relation(fields: [sessionId], references: [id])
}

model Score {
  id         Int      @id @default(autoincrement())
  sessionId  String
  userId     String?
  rubricJson String
  value      Float
  comments   String?
  session    Session @relation(fields: [sessionId], references: [id])
  user       User?   @relation(fields: [userId], references: [id])
}

model User {
  id              String    @id @default(uuid())
  fullName        String
  email           String?   @unique
  role            UserRole  @default(TRAINEE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  trainerSessions Session[] @relation("TrainerSessions")
  traineeSessions Session[] @relation("TraineeSessions")
  scores          Score[]
}

enum UserRole {
  TRAINER
  TRAINEE
}
